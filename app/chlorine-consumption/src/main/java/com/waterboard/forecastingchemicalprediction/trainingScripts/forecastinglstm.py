# -*- coding: utf-8 -*-
"""Forecastinglstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qCguxL3WDNe-zIuqEAvUM2iqLYheEEmg
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load the dataset
df = pd.read_excel('/content/weather_based_water_quality_data.xlsx')

# Step 1: Predict Initial Chlorine, pH, Turbidity based on Water Volume, Rain Probability, Temperature
X = df[['Water Volume (Cubic Meters)', 'Rain Probability (%)', 'Temperature (°C)']]
y = df[['Initial Chlorine (ppm)', 'Initial pH', 'Initial Turbidity']]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the data
scaler_X = StandardScaler()
scaler_y = StandardScaler()
X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)
y_train_scaled = scaler_y.fit_transform(y_train)
y_test_scaled = scaler_y.transform(y_test)

# Reshape X data for LSTM input (samples, time steps, features)
X_train_lstm = X_train_scaled.reshape(X_train_scaled.shape[0], 1, X_train_scaled.shape[1])
X_test_lstm = X_test_scaled.reshape(X_test_scaled.shape[0], 1, X_test_scaled.shape[1])

# Build the LSTM model for Step 1
model_step1 = Sequential([
    LSTM(64, activation='relu', input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])),
    Dense(32, activation='relu'),
    Dense(y_train.shape[1])  # Number of output features
])

model_step1.compile(optimizer='adam', loss='mse')

# Train the model
model_step1.fit(X_train_lstm, y_train_scaled, epochs=50, batch_size=16, verbose=1)

# Predict on the test set
y_pred_step1_scaled = model_step1.predict(X_test_lstm)
y_pred_step1 = scaler_y.inverse_transform(y_pred_step1_scaled)

# Evaluate the model
mse_step1 = mean_squared_error(y_test, y_pred_step1)
print("LSTM Mean Squared Error for Initial Chlorine, pH, Turbidity:", mse_step1)

# Example Prediction for Step 1
user_input = np.array([[24299, 13.4, 37.4]])  # Example input
user_input_scaled = scaler_X.transform(user_input)
user_input_lstm = user_input_scaled.reshape(1, 1, user_input_scaled.shape[1])
predicted_step1_scaled = model_step1.predict(user_input_lstm)
predicted_step1 = scaler_y.inverse_transform(predicted_step1_scaled)

print("Predicted Initial Chlorine (ppm):", predicted_step1[0][0])
print("Predicted Initial pH:", predicted_step1[0][1])
print("Predicted Initial Turbidity:", predicted_step1[0][2])

# Step 2: Predict Applied Chlorine, Calcium Carbonate, PAC
X_full = df[['Water Volume (Cubic Meters)', 'Rain Probability (%)', 'Temperature (°C)',
             'Initial Chlorine (ppm)', 'Initial pH', 'Initial Turbidity']]
y_full = df[['Applied Chlorine (KG)', 'Applied Calcium Carbonate (KG)', 'Applied PAC (KG)']]

# Split and scale the data
X_train_full, X_test_full, y_train_full, y_test_full = train_test_split(X_full, y_full, test_size=0.2, random_state=42)
scaler_X_full = StandardScaler()
scaler_y_full = StandardScaler()
X_train_full_scaled = scaler_X_full.fit_transform(X_train_full)
X_test_full_scaled = scaler_X_full.transform(X_test_full)
y_train_full_scaled = scaler_y_full.fit_transform(y_train_full)
y_test_full_scaled = scaler_y_full.transform(y_test_full)

# Reshape X_full data for LSTM input
X_train_full_lstm = X_train_full_scaled.reshape(X_train_full_scaled.shape[0], 1, X_train_full_scaled.shape[1])
X_test_full_lstm = X_test_full_scaled.reshape(X_test_full_scaled.shape[0], 1, X_test_full_scaled.shape[1])

# Build the LSTM model for Step 2
model_step2 = Sequential([
    LSTM(64, activation='relu', input_shape=(X_train_full_lstm.shape[1], X_train_full_lstm.shape[2])),
    Dense(32, activation='relu'),
    Dense(y_train_full.shape[1])  # Number of output features
])

model_step2.compile(optimizer='adam', loss='mse')

# Train the model
model_step2.fit(X_train_full_lstm, y_train_full_scaled, epochs=50, batch_size=16, verbose=1)

# Predict on the test set
y_pred_step2_scaled = model_step2.predict(X_test_full_lstm)
y_pred_step2 = scaler_y_full.inverse_transform(y_pred_step2_scaled)

# Evaluate the model
mse_step2 = mean_squared_error(y_test_full, y_pred_step2)
print("LSTM Mean Squared Error for Applied Chlorine, Calcium Carbonate, PAC:", mse_step2)

# Example Prediction for Step 2
user_input_full = np.array([[24299, 13.4, 37.4, predicted_step1[0][0], predicted_step1[0][1], predicted_step1[0][2]]])
user_input_full_scaled = scaler_X_full.transform(user_input_full)
user_input_full_lstm = user_input_full_scaled.reshape(1, 1, user_input_full_scaled.shape[1])
predicted_step2_scaled = model_step2.predict(user_input_full_lstm)
predicted_step2 = scaler_y_full.inverse_transform(predicted_step2_scaled)

print("Predicted Applied Chlorine (KG):", predicted_step2[0][0])
print("Predicted Applied Calcium Carbonate (KG):", predicted_step2[0][1])
print("Predicted Applied PAC (KG):", predicted_step2[0][2])

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Step 1 Evaluation Metrics
y_test_inverse = scaler_y.inverse_transform(y_test_scaled)  # Actual values (unscaled)
y_pred_inverse = scaler_y.inverse_transform(y_pred_step1_scaled)  # Predicted values (unscaled)

mse_step1 = mean_squared_error(y_test_inverse, y_pred_inverse)
rmse_step1 = np.sqrt(mse_step1)
mae_step1 = mean_absolute_error(y_test_inverse, y_pred_inverse)
r2_step1 = r2_score(y_test_inverse, y_pred_inverse)

print("Step 1 Metrics (Initial Chlorine, pH, Turbidity):")
print(f"Mean Squared Error (MSE): {mse_step1:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse_step1:.2f}")
print(f"Mean Absolute Error (MAE): {mae_step1:.2f}")
print(f"R² Score: {r2_step1:.2f}")

# Step 2 Evaluation Metrics
y_test_full_inverse = scaler_y_full.inverse_transform(y_test_full_scaled)  # Actual values (unscaled)
y_pred_full_inverse = scaler_y_full.inverse_transform(y_pred_step2_scaled)  # Predicted values (unscaled)

mse_step2 = mean_squared_error(y_test_full_inverse, y_pred_full_inverse)
rmse_step2 = np.sqrt(mse_step2)
mae_step2 = mean_absolute_error(y_test_full_inverse, y_pred_full_inverse)
r2_step2 = r2_score(y_test_full_inverse, y_pred_full_inverse)

print("\nStep 2 Metrics (Applied Chlorine, Calcium Carbonate, PAC):")
print(f"Mean Squared Error (MSE): {mse_step2:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse_step2:.2f}")
print(f"Mean Absolute Error (MAE): {mae_step2:.2f}")
print(f"R² Score: {r2_step2:.2f}")

from joblib import dump  # For saving models

# Save the first model (Initial Chlorine, pH, Turbidity)
dump(mse_step1, 'lstmmodel-a.bin')

from joblib import dump  # For saving models

# Save the first model (Initial Chlorine, pH, Turbidity)
dump(mse_step2, 'lstmmodel-b.bin')