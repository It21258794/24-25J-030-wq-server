# -*- coding: utf-8 -*-
"""Forecastingxngboost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fg8eix4XwMsDmZWLP2E1EIW630X1ll0H
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
file_path = '/content/weather_based_water_quality_data.xlsx'
data = pd.read_excel(file_path)

# Drop unused columns
data = data.drop(columns=['Season Category'])  # Ignoring the 'Season Category' column

# Features (X) and targets (y)
X = data[['Water Volume (Cubic Meters)', 'Rain Probability (%)', 'Temperature (°C)']]
y = data[['Applied Chlorine (KG)', 'Applied Calcium Carbonate (KG)', 'Applied PAC (KG)']]

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model
xgb_regressor = XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)

# Multi-output regressor to handle multiple target variables
multi_output_model = MultiOutputRegressor(xgb_regressor)

# Train the model
multi_output_model.fit(X_train, y_train)

# Predict on test set
y_pred = multi_output_model.predict(X_test)

# Evaluate the model
rmse = np.sqrt(mean_squared_error(y_test, y_pred, multioutput='raw_values'))
r2 = r2_score(y_test, y_pred, multioutput='uniform_average')

print("RMSE (per target):", rmse)
print("R2 Score:", r2)

# Example prediction
example_input = np.array([[24299, 13.4, 37.4]])  # Replace with user inputs: water volume, rain probability, temperature
example_prediction = multi_output_model.predict(example_input)
print("Predicted (Applied Chlorine, Calcium Carbonate, PAC):", example_prediction)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib  # For saving the model

# Load dataset
file_path = '/content/weather_based_water_quality_data.xlsx'
data = pd.read_excel(file_path)

# Drop unused columns
data = data.drop(columns=['Season Category'])  # Ignoring the 'Season Category' column

# Features (X) and targets (y)
X = data[['Water Volume (Cubic Meters)', 'Rain Probability (%)', 'Temperature (°C)']]
y = data[['Applied Chlorine (KG)', 'Applied Calcium Carbonate (KG)', 'Applied PAC (KG)']]

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model
xgb_regressor = XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)

# Multi-output regressor to handle multiple target variables
multi_output_model = MultiOutputRegressor(xgb_regressor)

# Train the model
multi_output_model.fit(X_train, y_train)

# Predict on test set
y_pred = multi_output_model.predict(X_test)

# Evaluate the model
rmse = np.sqrt(mean_squared_error(y_test, y_pred, multioutput='raw_values'))
r2 = r2_score(y_test, y_pred, multioutput='uniform_average')

print("RMSE (per target):", rmse)
print("R2 Score:", r2)

# Save the model to a .bin file
joblib.dump(multi_output_model, 'multi_output_xng_model.bin')

# Example prediction
example_input = np.array([[24299, 13.4, 37.4]])  # Replace with user inputs: water volume, rain probability, temperature
example_prediction = multi_output_model.predict(example_input)
print("Predicted (Applied Chlorine, Calcium Carbonate, PAC):", example_prediction)

pip install skl2onnx

pip install onnxmltools

from google.colab import files
files.download('multi_output_model.bin')