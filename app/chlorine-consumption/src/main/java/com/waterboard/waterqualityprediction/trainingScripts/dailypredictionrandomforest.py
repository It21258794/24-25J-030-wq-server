# -*- coding: utf-8 -*-
"""DailyPredictionrandomforest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kj_3VRV2IBEVn6xmCYzyeD4SLR3n22Nd
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import joblib

# Load the dataset
df = pd.read_excel('water_treatment_data.xlsx')

# Define features and targets for the model
features = ['Water Volume (Cubic Meters)', 'Initial Chlorine (ppm)', 'Initial pH', 'Initial Turbidity']
targets = ['Applied Chlorine (KG)', 'Applied Calcium Carbonate (KG)', 'Applied PAC (KG)']

# Split the data into training and testing sets
X = df[features]
y = df[targets]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a single multi-output regression model
model = MultiOutputRegressor(RandomForestRegressor(random_state=42))
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)

# Calculate RMSE for each target
rmse = {
    target: mean_squared_error(y_test[target], y_pred[:, i], squared=False)
    for i, target in enumerate(targets)
}
print("Model RMSEs:")
for target, error in rmse.items():
    print(f"{target}: {error}")

# Save the trained model to a file
joblib.dump(model, 'multi_output_model.pkl')
print("Model saved to 'multi_output_model.pkl'")

# Load the model
model = joblib.load('multi_output_model.pkl')

# Example input
user_input = pd.DataFrame({
    'Water Volume (Cubic Meters)': [30550],
    'Initial Chlorine (ppm)': [0.12],
    'Initial pH': [3.06],
    'Initial Turbidity': [3.15]
})

# Predict
predictions = model.predict(user_input)
print("Predicted Chlorine (KG):", predictions[0][0])
print("Predicted Calcium Carbonate (KG):", predictions[0][1])
print("Predicted PAC (KG):", predictions[0][2])

from google.colab import files

# Download the model file
files.download('multi_output_model.pkl')