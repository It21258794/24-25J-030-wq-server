name: Java CI with Maven and Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17 using AdoptOpenJDK (Temurin)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven from the app directory (parent POM)
      - name: Build the project with Maven
        run: mvn clean install -DskipTests
        working-directory: ./app  # Set working directory to 'app' where the parent POM is located

      # Step 4: Log in to Docker Hub using secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Build and push Docker image for main-application
      - name: Build and push Docker image for main-application
        uses: docker/build-push-action@v4
        with:
          context: ./app/main-application  # Docker context for the main application module
          tags: kaveeshait21258794/24-25j-030-wq-server:wq-server
          push: true
  
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up AWS CLI to access S3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Download application.properties from S3
      - name: Download application.properties
        run: |
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/application.properties application.properties

      # Set up SSH to EC2
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Deploy to EC2 and run container
      - name: Deploy to Amazon Linux EC2
        run: |
          scp -o StrictHostKeyChecking=no application.properties ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/application.properties
      
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull kaveeshait21258794/24-25j-030-wq-server:wq-server
            docker stop wq-server || true
            docker rm wq-server || true
            docker run -d --name wq-server \
              -p 8080:8080 \
              -v /home/ec2-user/application.properties:/app/config/application.properties \
              -e SPRING_CONFIG_LOCATION=file:/app/config/application.properties \
              kaveeshait21258794/24-25j-030-wq-server:wq-server
          EOF
 
